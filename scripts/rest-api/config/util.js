//random number in range
export const randomIntBetween = (min, max) => {
    return Math.floor(Math.random() * (max - min + 1) + min);
};

//get random item in array
export const PickRandomItemInArray = items => {
    var max = items.length;
    var randNum = Math.floor(Math.random() * max) + 1;
    return items[randNum - 1];
};

//random alphanumeric string
export const GetRandomString = () => {
    return (
        Math.random()
            .toString(36)
            .substring(2, 15) +
        Math.random()
            .toString(36)
            .substring(2, 15)
    );
};

/*
 * Function to setup the ramping VUs for the test.
 * load generation region set to amazon:au:sydney 100%
 */
export function setup_ramp(loadName) {

    // Check if the DURATION and TARGET environment variables are set
    if (!__ENV.DURATION || !__ENV.TARGET) {
        console.error("Error!: Both DURATION and TARGET environment variables must be provided.")
        return;
    }
    const duration = (__ENV.DURATION).split(",")
    const target = (__ENV.TARGET).split(",")

    let stagesForRamp = [];
    for (var i = 0; i < duration.length; i++) {
        stagesForRamp.push({ duration: duration[i], target: target[i] })
    }

    return {
        stages: stagesForRamp,
        ext: {
            loadimpact: {
                projectID: 3647856,
                // Test runs with the same name groups test runs together
                name: loadName,
                //staticIPs: true, //Akamai is currently configured with dynamic IPs
                token: '***********************',
                distribution: {
                    distributionLabel1: { loadZone: 'amazon:au:sydney', percent: 100 },
                    // distributionLabel2: { loadZone: 'amazon:sg:singapore', percent: 50 }
                },
                note: 'CA Kondo Perf Testing',
            }
        },
        thresholds: {
            http_req_duration: [`p(99)<2000`] // 99% of requests must complete below 2s
        }
    };
}

/*
 * allow you to configure how VUs and iterations are scheduled in granular detail. 
 * https://k6.io/docs/using-k6/scenarios/advanced-examples/
 */
export function setup_ramp_two_scenarios(loadName) {

    // Check if the DURATION and TARGET environment variables are set
    if (!__ENV.DURATION || !__ENV.TARGET) {
        console.error("Error!: Both DURATION and TARGET environment variables must be provided.")
        return;
    }
    const duration = (__ENV.DURATION).split(",")
    const target = (__ENV.TARGET).split(",")

    let stagesForRamp = [];
    for (var i = 0; i < duration.length; i++) {
        stagesForRamp.push({ duration: duration[i], target: parseInt(target[i]/2) })
    }

    return {

        scenarios: {
            scenario_1: {
                // some arbitrary scenario name
                executor: "ramping-vus",
                startVUs: 0,
                stages: stagesForRamp,
                gracefulRampDown: "1s",
                gracefulStop: "3s",
                tags: { test_type: 'scenrio' }, // extra tags for the metrics generated by this scenario
                exec: 'scenrio1', // the function this scenario will execute
            },
            scenario_2: {
                executor: "ramping-vus",
                startVUs: 0,
                stages: stagesForRamp,
                gracefulRampDown: "1s",
                gracefulStop: "3s",
                tags: { test_type: 'scenrio' }, // different extra metric tags for this scenario
                //env: { MY_CROC_ID: '1' }, // and we can specify extra environment variables as well!
                exec: 'scenrio2', // this scenario is executing different code than the one above!
            }
        },
        ext: {
            loadimpact: {
                projectID: 3647856,
                // Test runs with the same name groups test runs together
                name: loadName,
                staticIPs: false,
                token: '********************************',
                distribution: {
                    distributionLabel1: { loadZone: 'amazon:au:sydney', percent: 100 },
                    // distributionLabel2: { loadZone: 'amazon:sg:singapore', percent: 50 }
                },
                note: 'Demo Load testing',
            }
        },
        thresholds: {
            // we can set different thresholds for the different scenarios because
            // of the extra metric tags we set!
            'http_req_duration{test_type:scenrio}': ['p(95)<1000', 'p(99)<2000'],

        },
    };
}
//ex: return saturday after 30 days
export function nextDate(dayOfWeek, daysAfter) {
    var now = new Date();
    now.setDate(now.getDate() + daysAfter);
    now.setDate(now.getDate() + (dayOfWeek + (7 - now.getDay())) % 7);
    return now.toISOString().slice(0, 10);
}

